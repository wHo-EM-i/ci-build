# Lets store all our function at one place

# set your gmail and email
git config --global user.email "$gmail"
git config --global user.name "$CIRRUS_REPO_OWNER"

# lets store some variables
github_repo="https://$CIRRUS_REPO_OWNER:$github_token@github.com/$CIRRUS_REPO_FULL_NAME"
progress=https://cirrus-ci.com/build/$CIRRUS_BUILD_ID
device_codename=$(grep unch /tmp/ci/build.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
rom_name=$(grep init /tmp/ci/sync -m 1 | cut -d / -f 4)
upload_link=https://github.com/$CIRRUS_REPO_FULL_NAME
branch_name=$(grep init /tmp/ci/sync | awk -F "-b " '{print $2}' | awk '{print $1}')
upload_type=3
latest_version=1

# Compress function with pigz for faster compression
com () {
tar --use-compress-program="pigz -k -$2 " -cf $1.tar.gz $1
}

# install apt
install_apt () {
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
apt update && apt install -y wget pigz gh jq aria2
down https://emy.ehteshammalik4.workers.dev/gclone_setup || down https://emy.ehteshammalik4.workers.dev/gclone_setup
chmod 0775 gclone_setup && ./gclone_setup
}

# login in github before uploading
echo $github_token > mytoken.txt # login in github
gh auth login --with-token < mytoken.txt

# download ccache
down () {
SECONDS=0
time aria2c $1 -x16 -s50
}

# upload our rom zip
upload () {
case "$upload_type" in
		 1) # github
		 gh release create $rom_name --generate-notes --repo $upload_link
		 gh release upload --clobber $rom_name $1 --repo $upload_link
		 github_url=$upload_link/releases/download/$rom_name/$1
		 tg "Build Succeed!
Filename: $1
Zip Size: $(ls -sh ${PWD}/$1 | cut -d - -f 1 | cut -d / -f 1)
Time Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec.
Github link: $github_url"
		 ;;
		 2) # gdrive
		 gclone copy $1 whoemi:$CIRRUS_REPO_OWNER/$device_codename/$rom_name/$branch_name -P
		 gdrive_url=https://emy.ehteshammalik4.workers.dev/$CIRRUS_REPO_OWNER/$device_codename/$rom_name/$branch_name/$1
		 tg "Build Succeed!
Filename: $1
Zip Size: $(ls -sh ${PWD}/$1 | cut -d - -f 1 | cut -d / -f 1)
Time Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec.
Gdrive link: $gdrive_url"
		 ;;
		 3) # both
		 gclone copy $1 whoemi:$CIRRUS_REPO_OWNER/$device_codename/$rom_name/$branch_name -P
		 gh release create $rom_name --generate-notes --repo $upload_link
		 gh release upload --clobber $rom_name $1 --repo $upload_link
		 github_url=$upload_link/releases/download/$rom_name/$1
		 gdrive_url=https://emy.ehteshammalik4.workers.dev/$CIRRUS_REPO_OWNER/$device_codename/$rom_name/$branch_name/$1
		 tg "Build Succeed!
Filename: $1
Zip Size: $(ls -sh ${PWD}/$1 | cut -d - -f 1 | cut -d / -f 1)
Time Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec.
Gdrive link: $gdrive_url
Github link: $github_url"
		 ;;
		 *) # default is gdrive
		 gclone copy $1 whoemi:$CIRRUS_REPO_OWNER/$device_codename/$rom_name/$branch_name -P
		 gdrive_url=https://emy.ehteshammalik4.workers.dev/$CIRRUS_REPO_OWNER/$device_codename/$rom_name/$branch_name/$1
		 tg "Build Succeed!
Filename: $1
Zip Size: $(ls -sh ${PWD}/$1 | cut -d - -f 1 | cut -d / -f 1)
Time Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec.
Gdrive link: $gdrive_url"
esac
}

# upload our ccache
upload_ccache () {
SECONDS=0
gclone copy $1 whoemi:$device_codename/$rom_name/$branch_name -P
}

# push to telegram
tg () {
curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$1&chat_id=${chat_id}"
}

# Skip build if script is not latest
if [[ $user_version != $latest_version ]]; then
# TG Notification
tg "Main Repo have been Updated
You many face error with old script
Please refork from main repo
https://github.com/projects-nexus/cirrus-script/tree/main"
# update for non TG user
git clone -b $CIRRUS_BRANCH $github_repo $rom_name && cd $rom_name
git commit -sm "[skip ci] Main Repo have been Updated You many face error with old script, Please refork from Main repo https://github.com/projects-nexus/cirrus-script/tree/main" --allow-empty
git push -f
# skip build
exit 1
fi

# sync time
sync_time () {
sync_time="`cat /tmp/sync_time.txt`"
rm -rf sync_time.txt
}

# check Build Number
check_build_type () {
last_dir=${PWD}
cd /tmp/ci
git show -s --format=%s | awk 'NF>1{print $NF}' > /tmp/last_value.txt # store last value from commit name
last_value="`cat /tmp/last_value.txt`" # store last value
case "$last_value" in
		 S|s|R|r)
		 build_type=$last_value
		 ;;
		 *) # Lets make vendor as haven't stored any value in commit name
		 build_type=V
esac
cd $last_dir
rm -rf /tmp/last_* # clean up xD
}
